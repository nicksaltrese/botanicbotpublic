# this function is executed once for every new user chatting with harry
outputmacro: kate()  # you get harry by default
	$cs_token = #DO_INTERJECTION_SPLITTING  | #DO_SUBSTITUTE_SYSTEM   | #DO_NUMBER_MERGE | #DO_DATE_MERGE  | #DO_PROPERNAME_MERGE  | #DO_SPELLCHECK  | #DO_PARSE 

	^addtopic(~introductions)
	$cs_control_main = ~control
	$cs_control_post = ~XPOSTPROCESS  # uncomment to enable talk
	$userprompt = ^"%user: >"
	$botprompt = ^"KATE: "
	$singleResponse = 1 # issue only 1 output message

	# resource limits
	$cs_userfactlimit = 100000 # how many user facts to keep
	$cs_looplimit = 15000  # high but...


table: defaultbot (^name)
^createfact(^name defaultbot defaultbot)
DATA:
kate

topic: ~control system ()

# set all variables received in OOB
u: () ^respond(~process_oob_input)

# on startup, do introduction
u: ( %input<%userfirstline) 
	^gambit(~introductions)

u: (< shut up >) $shutup = 1
u: (< talk  >) $shutup = null

u: (\[ callback \]) Callback seen.
u: (\[ loopback \]) Loopback seen.
u: (\[ alarm \]) Alarm seen.
u: (< loopback test) \[ loopback=1000 \] Loopback requested.
u: (< callback test) \[ callback=1000 \] Callback requested.
u: (< alarm test) \[ alarm=5000 \] Alarm requested.

u: () # main per-sentence processing
	$_responseCount = %response
	if ($singleResponse) {$_responseCount = 0} # disable this to respond to each sentence in a volley

	$$currenttopic = %topic		# get the current topic at start of volley

	if ( %response == $_responseCount ) {^nofail(TOPIC ^rejoinder())}	# try for rejoinders. might generate an answer directly from what we are looking for.

	if (%length == 0 AND %response == $_responseCount )
	{
		^nofail(TOPIC ^gambit($$currenttopic))  # gambit current topic since no input (usually start of conversation)
	}

	if (%response == $_responseCount) { ^nofail(TOPIC ^respond($$currenttopic)) } # current topic tries to respond to his input

	if (%response == $_responseCount) # see if some other topic has keywords matching his input (given we have no response yet)
	{
		@8 = ^keywordtopics()	# get topics referred in input
		^loop()
		{
			$$topic = ^first(@8subject)
			^nofail(TOPIC ^respond($$topic))
			if (%response != $_responseCount) # stop when we find something to say
			{
				^end(RULE)	# we are done, this terminates the loop (not the rule)
			}
		}
	}	

##<<
	# if no topic reacts, go to the last ditch keywordless topic
	if (%response == $_responseCount) 
	{
		nofail(TOPIC ^respond(~keywordless))
	}

	# having no good response we know, now generate quibbles

	# now we need to find fake responses 
	if (%response == $_responseCount AND %rand > 50)
	{
		nofail(TOPIC respond(~QUIBBLE_ALL))
	}
##>>	

	# if we have rejoinders for what we said OR we asked a question, stop here
	if (%outputrejoinder OR %lastquestion) 
	{
		^end(TOPIC)
	}

	if (%response == $_responseCount AND ^marked($$currenttopic)) { nofail(TOPIC ^gambit($$currenttopic)) } # gambit current topic since keywords match current topic

	if (%response == $_responseCount) # gambit from ANY matching topic
	{
		@8 = ^keywordtopics()	# get topics referred in input
		^loop()
		{
			$$topic = ^first(@8subject)
			^nofail(TOPIC ^Gambit($$topic))	# gambit in best matching topic
			if (%response != $_responseCount) # stop when we find something
			{
				^end(RULE)
			}
		}
	}
	
	if (%response == $_responseCount){ nofail(TOPIC ^gambit($$currenttopic)) } # gambit from current topic even though no keywords matched
	
	if (%response == $_responseCount) 
	{ 
		@8 = ^GambitTopics()		# all topics with gambits (excluding system topics)
		^loop()
		{
			$$topic = ^pick(@8subject)
			^nofail(TOPIC ^Gambit($$topic))	# try a topic at random
			if (%response != $_responseCount)
			{
				^end(RULE)
			}
		}
	}
	
	if (%response == $_responseCount) 
	{
		 ^repeat() 
		 I don't know what to say. 
	}


topic: ~XPOSTPROCESS system () # gambits only - not allowed to write to  output - generates speech on windows -- for Linux you'd want to install Festival (or equivalent) and call that instead.

t: ($$oobjson)
	^postprintbefore( \[ $$oobjson \])
	^fail(RULE)

##<<
t: (^query(direct_v ? chatoutput ? -1 ? @9  ))  # get the sentences  (why is the object) -- no longer has quotes around it
	^loop()
	{
		$$tmp = ^last(@9subject) # note last output which is quoted string
		if (!%server AND %os == windows  AND !$SHUTUP)
		{
			$$tmp = ^"talk \"$$tmp\" "
			^popen($$tmp null)
		}
        if (!%server AND %os == mac  AND !$SHUTUP)
        {
            $$shellerror = ^system(^"say \"$$tmp\" ")
        }
	}
##>>

topic: ~process_oob_input system repeat keep()

u: (\[ _* \] ) # grab params and main sentence
	# sample sentence [ location=6|space=5 ] This is my input
	#   # a param looks like location:100
	@0 = ^burst('_0 "|") # get all variable assigns as facts
	^loop()
	{
		$$tmp = first(@0subject) # pick off next param
		_2 = ^burst($$tmp "=" ) # split word and value
		_2 = ^join($ _2) # create variable
		^_2 = _3 # do assignment onto variable
	}
	^fail(sentence)